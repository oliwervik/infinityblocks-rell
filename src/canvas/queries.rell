query get_all_cells(user_id: byte_array) {
    val cells = cell @* { } ( cell_dto(.location.to_struct(), .paintedAt, .paintedBy.to_struct(), .color, .dirty) );
    return cells;
}

query get_canvas(user_id: byte_array) {
    val canvas = canvas @ { } ( canvas_dto(.size.to_struct(), .pixelSize, .minScale, .maxScale, .defaultColor) );
    return canvas;
}

query get_cells_by_user(account_id: byte_array) {
    val user = user @ { .id == account_id };
    val cells = cell @* {
        .paintedBy == user
    } (
        cell_dto(.location.to_struct(), .paintedAt, .paintedBy.to_struct(), .color, .dirty)
    );
    return cells;
}

query cell_at_time(
    t: timestamp
) = cell_event @ {
    .transaction.block.timestamp <= t
} (
    @omit @sort_desc .transaction.block.timestamp,
    .location.to_struct(),
    .color
) limit 1;
