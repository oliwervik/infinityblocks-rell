operation paint_cell(x: integer, y: integer, at_color: text) {
    val account = auth.authenticate();
    val user = user @ { account };
    val timestamp = op_context.last_block_time;

    val balance = check_balance(account);

    require(balance.amount >= 1, "Not enough balance to paint");

    if (not exists(cell @? { .location.x == x, .location.y == y })) {
        val new_loc = create location (
            x = x,
            y = y
        );

        create cell (
            location = new_loc,
            color = at_color,
            paintedBy = user,
            paintedAt = timestamp,
            dirty = true
        );

        // Transfer to admin account
        val auth_desc = create_auth_descriptor(ft4.admin.get_admin_pubkey());
        val admin_account = ft4.accounts.account_by_id(auth_desc.hash());
        transfer_to(account, admin_account, 1);
        
    } else {
        update cell @ {
            .location.x == x,
            .location.y == y
        } (
            color = at_color,
            paintedBy = user,
            paintedAt = timestamp,
            dirty = true
        );

        // Transfer to admin account
        val auth_desc = create_auth_descriptor(ft4.admin.get_admin_pubkey());
        val admin_account = ft4.accounts.account_by_id(auth_desc.hash());
        transfer_to(account, admin_account, 1);
    }
}
