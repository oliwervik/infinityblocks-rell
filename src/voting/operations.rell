operation cast_vote(sentiment: voteSentiment, x: integer, y: integer) {
    val account = auth.authenticate();
    val user = user @ { account };
    val timestamp = op_context.last_block_time;

    require(location @? { .x == x, .y == y }, "You can only vote on cells that are painted");

    val location = location @ { .x == x, .y == y };
    val cell = cell @ { .location == location };

    require(cell.paintedBy != user, "You can not vote on your own cell");
    require(user @? { .account == cell.paintedBy.account }, "Error finding cell owner");

    if (
        not exists(vote
@? { .identifier == cell.hash()
, .voter == user })) {

        mint_and_give(account, 1);

        mint_and_give(cell.paintedBy.account, 1);
        update_lb_participant(LeaderboardType.TOPVOTED, user @ { .account == cell.paintedBy.account });

        create vote (
            .identifier = cell.hash(),
            cell = cell,
            voter = user,
            sentiment = sentiment,
            votedAt = timestamp,
            user = user
        );
    } else {
        require(false, "You have already voted on this cell");
    }
}
